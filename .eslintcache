[{"C:\\FYP\\Medi-Care-Project\\blockchain\\src\\index.js":"1","C:\\FYP\\Medi-Care-Project\\blockchain\\src\\serviceWorker.js":"2","C:\\FYP\\Medi-Care-Project\\blockchain\\src\\App.js":"3","C:\\FYP\\Medi-Care-Project\\blockchain\\src\\components\\Footer.js":"4","C:\\FYP\\Medi-Care-Project\\blockchain\\src\\components\\Signup.js":"5","C:\\FYP\\Medi-Care-Project\\blockchain\\src\\components\\Upload.js":"6","C:\\FYP\\Medi-Care-Project\\blockchain\\src\\components\\Home.js":"7","C:\\FYP\\Medi-Care-Project\\blockchain\\src\\components\\Navbar.js":"8","C:\\FYP\\Medi-Care-Project\\blockchain\\src\\components\\Analysis.js":"9","C:\\FYP\\Medi-Care-Project\\blockchain\\src\\components\\View.js":"10","C:\\FYP\\Medi-Care-Project\\blockchain\\src\\components\\AddDoctor.js":"11","C:\\FYP\\Medi-Care-Project\\blockchain\\src\\components\\identicon.js":"12","C:\\FYP\\Medi-Care-Project\\blockchain\\src\\components\\pnglib.js":"13"},{"size":503,"mtime":1609851154249,"results":"14","hashOfConfig":"15"},{"size":5086,"mtime":1609851154361,"results":"16","hashOfConfig":"15"},{"size":3522,"mtime":1615735561610,"results":"17","hashOfConfig":"15"},{"size":558,"mtime":1609851154819,"results":"18","hashOfConfig":"15"},{"size":2256,"mtime":1609851154976,"results":"19","hashOfConfig":"15"},{"size":2590,"mtime":1609851155017,"results":"20","hashOfConfig":"15"},{"size":2151,"mtime":1609851154861,"results":"21","hashOfConfig":"15"},{"size":3113,"mtime":1609851154937,"results":"22","hashOfConfig":"15"},{"size":2629,"mtime":1609851154774,"results":"23","hashOfConfig":"15"},{"size":2996,"mtime":1615548965260,"results":"24","hashOfConfig":"15"},{"size":4297,"mtime":1609851154737,"results":"25","hashOfConfig":"15"},{"size":7298,"mtime":1609851155104,"results":"26","hashOfConfig":"15"},{"size":6496,"mtime":1609851155142,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"osyqr9",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"30"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"30"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"30"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"30"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"30"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"30"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61"},"C:\\FYP\\Medi-Care-Project\\blockchain\\src\\index.js",[],["62","63"],"C:\\FYP\\Medi-Care-Project\\blockchain\\src\\serviceWorker.js",[],"C:\\FYP\\Medi-Care-Project\\blockchain\\src\\App.js",["64"],"import React, { Component } from 'react';\nimport NavBar from './components/Navbar';\nimport Signup from './components/Signup';\nimport Upload from './components/Upload';\nimport View from './components/View';\nimport { BrowserRouter, Route } from 'react-router-dom';\nimport Web3 from 'web3';\nimport Patient from './build/Patient.json';\nimport AddDoctor from './components/AddDoctor';\nimport Footer from './components/Footer';\nimport Analysis from './components/Analysis';\nimport Home from './components/Home';\n\n\nclass App extends Component {\n\n    constructor(){\n        super()\n        this.state = {\n            'account': null,\n            'patient': null,\n            'identicon': null,\n            'loading': true,\n        }\n    }\n\n    async componentWillMount() {\n        await this.loadWeb3()\n        await this.loadBlockChain()\n    }\n\n    async loadWeb3() {\n        if (window.ethereum) {\n            window.web3 = new Web3(window.ethereum)\n            await window.ethereum.enable()\n        }\n        else if (window.web3) {\n            window.web3 = new Web3(window.web3.currentProvider)\n        }\n        else {\n            window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!')\n        }\n    }\n\n    handleInputChange = (e) => {\n        this.setState({\n            [e.target.id]: e.target.value,\n        })\n    }\n\n    async loadBlockChain(){\n        const web3 = window.web3\n        const accounts = await web3.eth.getAccounts()\n        this.setState({ 'account': accounts[0] })\n        const networkId = await web3.eth.net.getId()\n        const networkData = Patient.networks[networkId]\n        if(networkData) {\n            const patient = new web3.eth.Contract(Patient.abi, networkData.address)\n            this.setState({ 'patient': patient, 'loading': false })\n        } else {\n            window.alert('Patient contract not deployed to detected network.')\n        }\n    }\n\n    render(){\n        if(this.state.loading === false){\n            return (\n                <BrowserRouter>\n                    <div className=\"App\">\n                        <main>\n                            <NavBar account={this.state.account}/>\n                            <Route exact path = '/' component={(() => <Home account={this.state.account}/>)} />\n                            <Route exact path=\"/signup\" component={(() => <Signup account={this.state.account} patient={this.state.patient}/>)} />\n\t\t\t    \n\t                    <Route exact path=\"/upload\" component={(() => <Upload account={this.state.account} patient={this.state.patient}/>)} />\n                            <Route exact path=\"/view\" component={(() => <View account={this.state.account} patient={this.state.patient}/>)} />\n                            <Route exact path=\"/doctors\" component={(() => <AddDoctor account={this.state.account} patient={this.state.patient}/>)} />\n                            <Route exact path=\"/view/:id\" component={Analysis} />\n                        </main>\n                        {/* <Footer></Footer> */}\n                    </div>\n                </BrowserRouter>\n            );\n        }else{\n            return (\n                <div className=\"container center-align\" style={{marginTop: 100}}>\n                    <br></br>\n                    <br></br>\n                    <br></br>\n                    <div className=\"progress\">\n                        <div className=\"indeterminate\"></div>\n                    </div>\n                </div>\n            )\n        }\n    }\n}\n\nexport default App;","C:\\FYP\\Medi-Care-Project\\blockchain\\src\\components\\Footer.js",[],"C:\\FYP\\Medi-Care-Project\\blockchain\\src\\components\\Signup.js",[],"C:\\FYP\\Medi-Care-Project\\blockchain\\src\\components\\Upload.js",[],"C:\\FYP\\Medi-Care-Project\\blockchain\\src\\components\\Home.js",["65","66"],"import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\nclass Home extends Component{\n\n    constructor(props){\n        super(props);\n        this.state = {\n            account: this.props.account\n        }\n    }\n\n    render(){\n        return(\n            <div>\n                <div class=\"row\">\n                    <div class=\"col s8\">\n                        <div className=\"container\">\n                            <h2><b>Welcome to Medi-Care!</b></h2>\n                            <i><h4>Your one-stop medical document library</h4></i>\n                            <h6>Medi-Care uses a technology called <b>Blockchain</b> which provides decentralization and immutabilty to any data present on it</h6>\n                            <p>Powered by the <b><a href='https://ethereum.org/' target='_blank'>Ethereum Blockchain</a></b></p>\n                            <p><i>Your account is: <b>{this.state.account}</b></i></p>\n                        </div>\n                    </div>\n                    <div class=\"col s4\">\n                        <div className=\"container\">\n                            <ul class=\"collection with-header\" style={{marginTop: 50}}>\n                                <li class=\"collection-header\"><h6><b>Choose what you want to do</b></h6></li>\n                                <li class=\"collection-item\"><i className=\"material-icons\">cloud_upload</i>&nbsp;&nbsp;&nbsp;<Link to='/upload'>Upload a medical document</Link></li>\n                                <li class=\"collection-item\"><i className=\"material-icons\">insert_drive_file</i>&nbsp;&nbsp;&nbsp;<Link to='/view'>View your uploaded medical documents</Link></li>\n                                <li class=\"collection-item\"><i className=\"material-icons\">person_add</i>&nbsp;&nbsp;&nbsp;<Link to='/doctors'>View/Add a trusted doctor</Link></li>\n                            </ul>\n                        </div>\n                    </div>\n                </div>\n                <div class=\"row\">\n                    <img className=\"activator\" src=\"images/home.png\"/>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Home;","C:\\FYP\\Medi-Care-Project\\blockchain\\src\\components\\Navbar.js",["67","68","69","70"],"import React, { Component } from 'react'\nimport { NavLink, withRouter } from 'react-router-dom'\nimport Identicon from './identicon';\n\n\nclass Navbar extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            location: \"\",\n            identicon: null,\n            loading: true, \n            account: this.props.account\n        }\n        \n    }\n\n    render(){\n        if(this.props.location.pathname === \"/\" || this.props.location.pathname === \"/signup\" || this.props.location.pathname === \"/login\"){\n            return ( \n                <nav className=\"nav-wrapper red darken-3\">\n                    <div className=\"container\">\n                        <a href=\"#\" className=\"brand-logo center\"><i style={{marginTop: 5}} className=\"material-icons\">local_hospital</i>Medi-Care</a>\n                        <ul className=\"right hide-on-med-and-down\">\n                            <li>\n                            { this.props.account\n                                ? <img\n                                    style={{marginTop: 15, marginLeft: 15}}\n                                    className='v-align center'\n                                    id=\"icon\"\n                                    width='30'\n                                    height='30'\n                                    src={`data:image/png;base64,${new Identicon(this.state.account, 30).toString()}`}\n                                />\n                                : <span></span>\n                                }\n                            </li>\n                        </ul>\n                    </div>\n                </nav>\n            )\n        }else{\n            return(\n                <nav className=\"nav-wrapper red darken-3\">\n                    <div className=\"container\">\n                    <a href=\"#\" className=\"brand-logo\"><i style={{marginTop: 5}} className=\"material-icons\">local_hospital</i>Medi-Care</a>\n                        <ul className=\"right hide-on-med-and-down\">\n                            <li><NavLink to=\"/\">Home</NavLink></li>\n                            <li><NavLink to=\"/upload\">Upload</NavLink></li>\n                            <li><NavLink to=\"/view\">View</NavLink></li>\n                            <li><NavLink to=\"/doctors\">Doctors</NavLink></li>\n                            <li>\n                            { this.props.account\n                                ? <img\n                                    style={{marginTop: 15, marginLeft: 15}}\n                                    className='v-align center'\n                                    id=\"icon\"\n                                    width='30'\n                                    height='30'\n                                    src={`data:image/png;base64,${new Identicon(this.state.account, 30).toString()}`}\n                                />\n                                : <span></span>\n                                }\n                            </li>\n                        </ul>\n                    </div>\n                </nav>\n            )\n        }\n    }\n}\n\nexport default withRouter(Navbar)","C:\\FYP\\Medi-Care-Project\\blockchain\\src\\components\\Analysis.js",[],"C:\\FYP\\Medi-Care-Project\\blockchain\\src\\components\\View.js",["71"],"import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\nclass View extends Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            id: null,\n            account: this.props.account,\n            patient: this.props.patient,\n            files: [],\n            selectedId: null,\n            loading: true,\n        }\n    }\n\n    handleInputChange = (e) => {\n        this.setState({\n            selectedId: e.target.id,\n        });\n        window.open('http://localhost:8080/ipfs/' + e.target.id);\n    }\n\n    async componentWillMount(){\n       if(this.props.patient !== null){\n            var patient = await this.state.patient.methods.patients(this.state.account).call();\n            var count = patient.fileCount;\n            for (var i = 0; i < count; i++) {\n                const file = await this.state.patient.methods.files(this.state.account, i).call()\n                this.setState({\n                    files: [...this.state.files, file]\n                })\n            }\n            this.setState({\n                loading: false\n            })\n       }else{\n           this.setState({\n               loading: true\n           })\n       }\n    }\n\n    render(){\n        const fileList = this.state.files.map(files => {\n            return (\n                <div className=\"contact\" key={files.fileHash}>\n                    <li className=\"collection-item avatar\">\n                        <i className=\"material-icons circle blue darken-2\">insert_drive_file</i>\n                        <p><b>{files.fileName}</b></p>\n                        <p><i>Uploaded on: {files.datetime}</i></p>\n                        <a href=\"\" className=\"secondary-content\"><button id={files.fileHash} onClick={this.handleInputChange} className=\"waves-effect waves-light btn blue darken-2\">View</button></a>\n                        &nbsp;&nbsp;&nbsp;\n                        <Link to={\"/view/\" + files.fileHash} className=\"secondary-content\" style={{marginRight: 80}}><button id={files.fileHash} className=\"waves-effect waves-light btn orange darken-3\">Analyze</button></Link>\n                    </li>\n                </div>\n            )\n        }) \n        if(this.state.loading === false){\n            return(\n                <div className=\"container\">\n                    <br></br>\n                    <br></br>\n                    <ul className=\"collection\">\n                        <li className=\"collection-item avatar\">\n                            <h3>Uploaded Medical Documents</h3>\n                        </li>\n                            {fileList}\n                    </ul>\n                </div>\n            )\n        }else{\n            return (\n                <div className=\"container center-align\" style={{marginTop: 100}}>\n                    <div className=\"progress\">\n                        <div className=\"indeterminate\"></div>\n                    </div>\n                </div>\n            )\n        }\n    }\n}\n\nexport default View;","C:\\FYP\\Medi-Care-Project\\blockchain\\src\\components\\AddDoctor.js",["72"],"import React, { Component } from 'react'\n\nclass AddDoctor extends Component {\n\n    constructor(props){\n        super(props)\n        this.state = {\n            'patient': this.props.patient,\n            'account': this.props.account,\n            'loading': null,\n            'docAccount': null,\n            'name': null,\n            'doctors': []\n        }\n    }\n\n    handleInputChange = (e) => {\n        this.setState({\n            [e.target.name] : e.target.value\n        })\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        this.addDoctorToPatient();\n    }\n    \n    addDoctorToPatient() {\n        console.log('final', this.state);\n        this.setState({ loading: true })\n        this.state.patient.methods.saveDoctor(this.state.name, this.state.docAccount).send({ from: this.state.account })\n        .once('receipt', (receipt) => {\n            console.log(receipt);\n          this.setState({ loading: false })\n          window.location.assign(\"/doctors\");\n        })\n    }\n\n    async componentWillMount(){\n        console.log('Inside com will mount', this.props);\n        if(this.props.patient !== null){\n            var patient = await this.state.patient.methods.patients(this.state.account).call();\n            var count = patient.doctorCount;\n            for (var i = 0; i < count; i++) {\n                const doctor = await this.state.patient.methods.doctors(this.state.account, i).call()\n                this.setState({\n                    doctors: [...this.state.doctors, doctor]\n                })\n            }\n            this.setState({\n                loading: false\n            })\n            console.log(this.state);\n        }else{\n            this.setState({\n                loading: true\n            })\n        }\n    }\n    \n\n    render(){\n        const docList = this.state.doctors.map(doctors => {\n            return (\n                <div className=\"contact\" key={doctors.doctorAcc}>\n                    <li className=\"collection-item avatar\">\n                        <i className=\"material-icons circle blue darken-2\">local_hospital</i>\n                        <p><b>{doctors.docName}</b></p>\n                        <p><i>{doctors.doctorAcc}</i></p>\n                        <a href=\"\" className=\"secondary-content\"><button id={doctors.doctorAcc} className=\"waves-effect waves-light btn blue darken-2\">MORE INFO</button></a>\n                    </li>\n                </div>\n            )\n        }) \n        if(this.state.loading === false){\n            return(\n                <div className=\"container\">\n                <br></br>\n                    <div className=\"container\">\n                        <ul className=\"collection\">\n                            <li className=\"collection-item avatar\">\n                                <h3>My Doctors</h3>\n                            </li>\n                                {docList}\n                        </ul>\n                    </div>  \n\n                    <div className=\"container\">\n                        <br></br>\n                        <br></br>\n                        <br></br>\n                    </div>\n\n                    <div className=\"container\">\n                    <h3>Add a Trusted Doctor</h3>\n                        <form onSubmit={this.handleSubmit}>\n                            <input type=\"text\" id=\"name\" name=\"name\" onChange={this.handleInputChange} required/>\n                            <label htmlFor=\"name\">Name</label><br></br>\n                            <input type=\"text\" id=\"docAccount\" name=\"docAccount\" onChange={this.handleInputChange} required/>\n                            <label htmlFor=\"name\">Doctor's Account</label><br></br><br></br>\n                            <button className=\"btn blue darken-2\" type=\"submit\" name=\"action\">Add\n                                <i className=\"material-icons right\">person_add</i>\n                            </button>\n                        </form>\n                    </div>\n                </div>\n            )\n        }else{\n            return (\n                <div className=\"container center-align\">\n                    <div className=\"progress\">\n                        <div className=\"indeterminate\"></div>\n                    </div>\n                </div>\n            )\n        }\n    }\n}\n\nexport default AddDoctor;","C:\\FYP\\Medi-Care-Project\\blockchain\\src\\components\\identicon.js",["73","74","75"],"/**\n * Identicon.js 2.3.3\n * http://github.com/stewartlord/identicon.js\n *\n * PNGLib required for PNG output\n * http://www.xarg.org/download/pnglib.js\n *\n * Copyright 2018, Stewart Lord\n * Released under the BSD license\n * http://www.opensource.org/licenses/bsd-license.php\n */\n\n(function() {\n    var PNGlib;\n    if (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n        PNGlib = require('./pnglib');\n    } else {\n        PNGlib = window.PNGlib;\n    }\n\n    var Identicon = function(hash, options){\n        if (typeof(hash) !== 'string' || hash.length < 15) {\n            throw 'A hash of at least 15 characters is required.';\n        }\n\n        this.defaults = {\n            background: [240, 240, 240, 255],\n            margin:     0.08,\n            size:       64,\n            saturation: 0.7,\n            brightness: 0.5,\n            format:     'png'\n        };\n\n        this.options = typeof(options) === 'object' ? options : this.defaults;\n\n        // backward compatibility with old constructor (hash, size, margin)\n        if (typeof(arguments[1]) === 'number') { this.options.size   = arguments[1]; }\n        if (arguments[2])                      { this.options.margin = arguments[2]; }\n\n        this.hash        = hash\n        this.background  = this.options.background || this.defaults.background;\n        this.size        = this.options.size       || this.defaults.size;\n        this.format      = this.options.format     || this.defaults.format;\n        this.margin      = this.options.margin !== undefined ? this.options.margin : this.defaults.margin;\n\n        // foreground defaults to last 7 chars as hue at 70% saturation, 50% brightness\n        var hue          = parseInt(this.hash.substr(-7), 16) / 0xfffffff;\n        var saturation   = this.options.saturation || this.defaults.saturation;\n        var brightness   = this.options.brightness || this.defaults.brightness;\n        this.foreground  = this.options.foreground || this.hsl2rgb(hue, saturation, brightness);\n    };\n\n    Identicon.prototype = {\n        background: null,\n        foreground: null,\n        hash:       null,\n        margin:     null,\n        size:       null,\n        format:     null,\n\n        image: function(){\n            return this.isSvg()\n                ? new Svg(this.size, this.foreground, this.background)\n                : new PNGlib(this.size, this.size, 256);\n        },\n\n        render: function(){\n            var image      = this.image(),\n                size       = this.size,\n                baseMargin = Math.floor(size * this.margin),\n                cell       = Math.floor((size - (baseMargin * 2)) / 5),\n                margin     = Math.floor((size - cell * 5) / 2),\n                bg         = image.color.apply(image, this.background),\n                fg         = image.color.apply(image, this.foreground);\n\n            // the first 15 characters of the hash control the pixels (even/odd)\n            // they are drawn down the middle first, then mirrored outwards\n            var i, color;\n            for (i = 0; i < 15; i++) {\n                color = parseInt(this.hash.charAt(i), 16) % 2 ? bg : fg;\n                if (i < 5) {\n                    this.rectangle(2 * cell + margin, i * cell + margin, cell, cell, color, image);\n                } else if (i < 10) {\n                    this.rectangle(1 * cell + margin, (i - 5) * cell + margin, cell, cell, color, image);\n                    this.rectangle(3 * cell + margin, (i - 5) * cell + margin, cell, cell, color, image);\n                } else if (i < 15) {\n                    this.rectangle(0 * cell + margin, (i - 10) * cell + margin, cell, cell, color, image);\n                    this.rectangle(4 * cell + margin, (i - 10) * cell + margin, cell, cell, color, image);\n                }\n            }\n\n            return image;\n        },\n\n        rectangle: function(x, y, w, h, color, image){\n            if (this.isSvg()) {\n                image.rectangles.push({x: x, y: y, w: w, h: h, color: color});\n            } else {\n                var i, j;\n                for (i = x; i < x + w; i++) {\n                    for (j = y; j < y + h; j++) {\n                        image.buffer[image.index(i, j)] = color;\n                    }\n                }\n            }\n        },\n\n        // adapted from: https://gist.github.com/aemkei/1325937\n        hsl2rgb: function(h, s, b){\n            h *= 6;\n            s = [\n                b += s *= b < .5 ? b : 1 - b,\n                b - h % 1 * s * 2,\n                b -= s *= 2,\n                b,\n                b + h % 1 * s,\n                b + s\n            ];\n\n            return[\n                s[ ~~h    % 6 ] * 255, // red\n                s[ (h|16) % 6 ] * 255, // green\n                s[ (h|8)  % 6 ] * 255  // blue\n            ];\n        },\n\n        toString: function(raw){\n            // backward compatibility with old toString, default to base64\n            if (raw) {\n                return this.render().getDump();\n            } else {\n                return this.render().getBase64();\n            }\n        },\n\n        isSvg: function(){\n            return this.format.match(/svg/i)\n        }\n    };\n\n    var Svg = function(size, foreground, background){\n        this.size       = size;\n        this.foreground = this.color.apply(this, foreground);\n        this.background = this.color.apply(this, background);\n        this.rectangles = [];\n    };\n\n    Svg.prototype = {\n        size:       null,\n        foreground: null,\n        background: null,\n        rectangles: null,\n\n        color: function(r, g, b, a){\n            var values = [r, g, b].map(Math.round);\n            values.push((a >= 0) && (a <= 255) ? a/255 : 1);\n            return 'rgba(' + values.join(',') + ')';\n        },\n\n        getDump: function(){\n          var i,\n                xml,\n                rect,\n                fg     = this.foreground,\n                bg     = this.background,\n                stroke = this.size * 0.005;\n\n            xml = \"<svg xmlns='http://www.w3.org/2000/svg'\"\n                + \" width='\" + this.size + \"' height='\" + this.size + \"'\"\n                + \" style='background-color:\" + bg + \";'>\"\n                + \"<g style='fill:\" + fg + \"; stroke:\" + fg + \"; stroke-width:\" + stroke + \";'>\";\n\n            for (i = 0; i < this.rectangles.length; i++) {\n                rect = this.rectangles[i];\n                if (rect.color == bg) continue;\n                xml += \"<rect \"\n                    + \" x='\"      + rect.x + \"'\"\n                    + \" y='\"      + rect.y + \"'\"\n                    + \" width='\"  + rect.w + \"'\"\n                    + \" height='\" + rect.h + \"'\"\n                    + \"/>\";\n            }\n            xml += \"</g></svg>\"\n\n            return xml;\n        },\n\n        getBase64: function(){\n            if ('function' === typeof btoa) {\n                return btoa(this.getDump());\n            } else if (Buffer) {\n                return new Buffer(this.getDump(), 'binary').toString('base64');\n            } else {\n                throw 'Cannot generate base64 output';\n            }\n        }\n    };\n\n    if (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n        module.exports = Identicon;\n    } else {\n        window.Identicon = Identicon;\n    }\n})();","C:\\FYP\\Medi-Care-Project\\blockchain\\src\\components\\pnglib.js",["76","77","78","79","80","81","82"],"/**\n* A handy class to calculate color values.\n*\n* @version 1.0\n* @author Robert Eisele <robert@xarg.org>\n* @copyright Copyright (c) 2010, Robert Eisele\n* @link http://www.xarg.org/2010/03/generate-client-side-png-files-using-javascript/\n* @license http://www.opensource.org/licenses/bsd-license.php BSD License\n*\n*/\n\n(function() {\n\n\t// helper functions for that ctx\n\tfunction write(buffer, offs) {\n\t\tfor (var i = 2; i < arguments.length; i++) {\n\t\t\tfor (var j = 0; j < arguments[i].length; j++) {\n\t\t\t\tbuffer[offs++] = arguments[i].charAt(j);\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction byte2(w) {\n\t\treturn String.fromCharCode((w >> 8) & 255, w & 255);\n\t}\n\n\tfunction byte4(w) {\n\t\treturn String.fromCharCode((w >> 24) & 255, (w >> 16) & 255, (w >> 8) & 255, w & 255);\n\t}\n\n\tfunction byte2lsb(w) {\n\t\treturn String.fromCharCode(w & 255, (w >> 8) & 255);\n\t}\n\n\t// modified from original source to support NPM\n\tvar PNGlib = function(width,height,depth) {\n\n\t\tthis.width   = width;\n\t\tthis.height  = height;\n\t\tthis.depth   = depth;\n\n\t\t// pixel data and row filter identifier size\n\t\tthis.pix_size = height * (width + 1);\n\n\t\t// deflate header, pix_size, block headers, adler32 checksum\n\t\tthis.data_size = 2 + this.pix_size + 5 * Math.floor((0xfffe + this.pix_size) / 0xffff) + 4;\n\n\t\t// offsets and sizes of Png chunks\n\t\tthis.ihdr_offs = 0;\t\t\t\t\t\t\t\t\t// IHDR offset and size\n\t\tthis.ihdr_size = 4 + 4 + 13 + 4;\n\t\tthis.plte_offs = this.ihdr_offs + this.ihdr_size;\t// PLTE offset and size\n\t\tthis.plte_size = 4 + 4 + 3 * depth + 4;\n\t\tthis.trns_offs = this.plte_offs + this.plte_size;\t// tRNS offset and size\n\t\tthis.trns_size = 4 + 4 + depth + 4;\n\t\tthis.idat_offs = this.trns_offs + this.trns_size;\t// IDAT offset and size\n\t\tthis.idat_size = 4 + 4 + this.data_size + 4;\n\t\tthis.iend_offs = this.idat_offs + this.idat_size;\t// IEND offset and size\n\t\tthis.iend_size = 4 + 4 + 4;\n\t\tthis.buffer_size  = this.iend_offs + this.iend_size;\t// total PNG size\n\n\t\tthis.buffer  = new Array();\n\t\tthis.palette = new Object();\n\t\tthis.pindex  = 0;\n\n\t\tvar _crc32 = new Array();\n\n\t\t// initialize buffer with zero bytes\n\t\tfor (var i = 0; i < this.buffer_size; i++) {\n\t\t\tthis.buffer[i] = \"\\x00\";\n\t\t}\n\n\t\t// initialize non-zero elements\n\t\twrite(this.buffer, this.ihdr_offs, byte4(this.ihdr_size - 12), 'IHDR', byte4(width), byte4(height), \"\\x08\\x03\");\n\t\twrite(this.buffer, this.plte_offs, byte4(this.plte_size - 12), 'PLTE');\n\t\twrite(this.buffer, this.trns_offs, byte4(this.trns_size - 12), 'tRNS');\n\t\twrite(this.buffer, this.idat_offs, byte4(this.idat_size - 12), 'IDAT');\n\t\twrite(this.buffer, this.iend_offs, byte4(this.iend_size - 12), 'IEND');\n\n\t\t// initialize deflate header\n\t\tvar header = ((8 + (7 << 4)) << 8) | (3 << 6);\n\t\theader+= 31 - (header % 31);\n\n\t\twrite(this.buffer, this.idat_offs + 8, byte2(header));\n\n\t\t// initialize deflate block headers\n\t\tfor (var i = 0; (i << 16) - 1 < this.pix_size; i++) {\n\t\t\tvar size, bits;\n\t\t\tif (i + 0xffff < this.pix_size) {\n\t\t\t\tsize = 0xffff;\n\t\t\t\tbits = \"\\x00\";\n\t\t\t} else {\n\t\t\t\tsize = this.pix_size - (i << 16) - i;\n\t\t\t\tbits = \"\\x01\";\n\t\t\t}\n\t\t\twrite(this.buffer, this.idat_offs + 8 + 2 + (i << 16) + (i << 2), bits, byte2lsb(size), byte2lsb(~size));\n\t\t}\n\n\t\t/* Create crc32 lookup table */\n\t\tfor (var i = 0; i < 256; i++) {\n\t\t\tvar c = i;\n\t\t\tfor (var j = 0; j < 8; j++) {\n\t\t\t\tif (c & 1) {\n\t\t\t\t\tc = -306674912 ^ ((c >> 1) & 0x7fffffff);\n\t\t\t\t} else {\n\t\t\t\t\tc = (c >> 1) & 0x7fffffff;\n\t\t\t\t}\n\t\t\t}\n\t\t\t_crc32[i] = c;\n\t\t}\n\n\t\t// compute the index into a png for a given pixel\n\t\tthis.index = function(x,y) {\n\t\t\tvar i = y * (this.width + 1) + x + 1;\n\t\t\tvar j = this.idat_offs + 8 + 2 + 5 * Math.floor((i / 0xffff) + 1) + i;\n\t\t\treturn j;\n\t\t}\n\n\t\t// convert a color and build up the palette\n\t\tthis.color = function(red, green, blue, alpha) {\n\n\t\t\talpha = alpha >= 0 ? alpha : 255;\n\t\t\tvar color = (((((alpha << 8) | red) << 8) | green) << 8) | blue;\n\n\t\t\tif (typeof this.palette[color] == \"undefined\") {\n\t\t\t\tif (this.pindex == this.depth) return \"\\x00\";\n\n\t\t\t\tvar ndx = this.plte_offs + 8 + 3 * this.pindex;\n\n\t\t\t\tthis.buffer[ndx + 0] = String.fromCharCode(red);\n\t\t\t\tthis.buffer[ndx + 1] = String.fromCharCode(green);\n\t\t\t\tthis.buffer[ndx + 2] = String.fromCharCode(blue);\n\t\t\t\tthis.buffer[this.trns_offs+8+this.pindex] = String.fromCharCode(alpha);\n\n\t\t\t\tthis.palette[color] = String.fromCharCode(this.pindex++);\n\t\t\t}\n\t\t\treturn this.palette[color];\n\t\t}\n\n\t\t// output a PNG string, Base64 encoded\n\t\tthis.getBase64 = function() {\n\n\t\t\tvar s = this.getDump();\n\n\t\t\tvar ch = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n\t\t\tvar c1, c2, c3, e1, e2, e3, e4;\n\t\t\tvar l = s.length;\n\t\t\tvar i = 0;\n\t\t\tvar r = \"\";\n\n\t\t\tdo {\n\t\t\t\tc1 = s.charCodeAt(i);\n\t\t\t\te1 = c1 >> 2;\n\t\t\t\tc2 = s.charCodeAt(i+1);\n\t\t\t\te2 = ((c1 & 3) << 4) | (c2 >> 4);\n\t\t\t\tc3 = s.charCodeAt(i+2);\n\t\t\t\tif (l < i+2) { e3 = 64; } else { e3 = ((c2 & 0xf) << 2) | (c3 >> 6); }\n\t\t\t\tif (l < i+3) { e4 = 64; } else { e4 = c3 & 0x3f; }\n\t\t\t\tr+= ch.charAt(e1) + ch.charAt(e2) + ch.charAt(e3) + ch.charAt(e4);\n\t\t\t} while ((i+= 3) < l);\n\t\t\treturn r;\n\t\t}\n\n\t\t// output a PNG string\n\t\tthis.getDump = function() {\n\n\t\t\t// compute adler32 of output pixels + row filter bytes\n\t\t\tvar BASE = 65521; /* largest prime smaller than 65536 */\n\t\t\tvar NMAX = 5552;  /* NMAX is the largest n such that 255n(n+1)/2 + (n+1)(BASE-1) <= 2^32-1 */\n\t\t\tvar s1 = 1;\n\t\t\tvar s2 = 0;\n\t\t\tvar n = NMAX;\n\n\t\t\tfor (var y = 0; y < this.height; y++) {\n\t\t\t\tfor (var x = -1; x < this.width; x++) {\n\t\t\t\t\ts1+= this.buffer[this.index(x, y)].charCodeAt(0);\n\t\t\t\t\ts2+= s1;\n\t\t\t\t\tif ((n-= 1) == 0) {\n\t\t\t\t\t\ts1%= BASE;\n\t\t\t\t\t\ts2%= BASE;\n\t\t\t\t\t\tn = NMAX;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\ts1%= BASE;\n\t\t\ts2%= BASE;\n\t\t\twrite(this.buffer, this.idat_offs + this.idat_size - 8, byte4((s2 << 16) | s1));\n\n\t\t\t// compute crc32 of the PNG chunks\n\t\t\tfunction crc32(png, offs, size) {\n\t\t\t\tvar crc = -1;\n\t\t\t\tfor (var i = 4; i < size-4; i += 1) {\n\t\t\t\t\tcrc = _crc32[(crc ^ png[offs+i].charCodeAt(0)) & 0xff] ^ ((crc >> 8) & 0x00ffffff);\n\t\t\t\t}\n\t\t\t\twrite(png, offs+size-4, byte4(crc ^ -1));\n\t\t\t}\n\n\t\t\tcrc32(this.buffer, this.ihdr_offs, this.ihdr_size);\n\t\t\tcrc32(this.buffer, this.plte_offs, this.plte_size);\n\t\t\tcrc32(this.buffer, this.trns_offs, this.trns_size);\n\t\t\tcrc32(this.buffer, this.idat_offs, this.idat_size);\n\t\t\tcrc32(this.buffer, this.iend_offs, this.iend_size);\n\n\t\t\t// convert PNG to string\n\t\t\treturn \"\\x89PNG\\r\\n\\x1a\\n\"+this.buffer.join('');\n\t\t}\n\t}\n\n\t// modified from original source to support NPM\n\tif (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n\t\tmodule.exports = PNGlib;\n\t} else {\n\t\twindow.PNGlib = PNGlib;\n\t}\n})();",{"ruleId":"83","replacedBy":"84"},{"ruleId":"85","replacedBy":"86"},{"ruleId":"87","severity":1,"message":"88","line":10,"column":8,"nodeType":"89","messageId":"90","endLine":10,"endColumn":14},{"ruleId":"91","severity":1,"message":"92","line":22,"column":50,"nodeType":"93","endLine":22,"endColumn":98},{"ruleId":"94","severity":1,"message":"95","line":38,"column":21,"nodeType":"93","endLine":38,"endColumn":71},{"ruleId":"96","severity":1,"message":"97","line":23,"column":25,"nodeType":"93","endLine":23,"endColumn":67},{"ruleId":"94","severity":1,"message":"95","line":27,"column":35,"nodeType":"93","endLine":34,"endColumn":35},{"ruleId":"96","severity":1,"message":"97","line":46,"column":21,"nodeType":"93","endLine":46,"endColumn":56},{"ruleId":"94","severity":1,"message":"95","line":54,"column":35,"nodeType":"93","endLine":61,"endColumn":35},{"ruleId":"96","severity":1,"message":"97","line":53,"column":25,"nodeType":"93","endLine":53,"endColumn":66},{"ruleId":"96","severity":1,"message":"97","line":70,"column":25,"nodeType":"93","endLine":70,"endColumn":66},{"ruleId":"98","severity":1,"message":"99","line":23,"column":13,"nodeType":"100","messageId":"101","endLine":23,"endColumn":67},{"ruleId":"102","severity":1,"message":"103","line":176,"column":32,"nodeType":"104","messageId":"105","endLine":176,"endColumn":34},{"ruleId":"98","severity":1,"message":"99","line":195,"column":17,"nodeType":"100","messageId":"101","endLine":195,"endColumn":55},{"ruleId":"106","severity":1,"message":"107","line":61,"column":18,"nodeType":"108","messageId":"109","endLine":61,"endColumn":29},{"ruleId":"110","severity":1,"message":"111","line":62,"column":18,"nodeType":"108","messageId":"109","endLine":62,"endColumn":30},{"ruleId":"106","severity":1,"message":"107","line":65,"column":16,"nodeType":"108","messageId":"109","endLine":65,"endColumn":27},{"ruleId":"112","severity":1,"message":"113","line":86,"column":12,"nodeType":"89","messageId":"114","endLine":86,"endColumn":13},{"ruleId":"112","severity":1,"message":"113","line":99,"column":12,"nodeType":"89","messageId":"114","endLine":99,"endColumn":13},{"ruleId":"102","severity":1,"message":"103","line":125,"column":21,"nodeType":"104","messageId":"105","endLine":125,"endColumn":23},{"ruleId":"102","severity":1,"message":"103","line":177,"column":18,"nodeType":"104","messageId":"105","endLine":177,"endColumn":20},"no-native-reassign",["115"],"no-negated-in-lhs",["116"],"no-unused-vars","'Footer' is defined but never used.","Identifier","unusedVar","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXOpeningElement","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","no-throw-literal","Expected an error object to be thrown.","ThrowStatement","object","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-array-constructor","The array literal notation [] is preferable.","NewExpression","preferLiteral","no-new-object","The object literal notation {} is preferrable.","no-redeclare","'i' is already defined.","redeclared","no-global-assign","no-unsafe-negation"]